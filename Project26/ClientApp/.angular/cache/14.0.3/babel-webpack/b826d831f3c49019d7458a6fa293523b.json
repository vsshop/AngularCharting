{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { LogLevel } from \"./ILogger\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\nconst LogLevelNameMapping = {\n  trace: LogLevel.Trace,\n  debug: LogLevel.Debug,\n  info: LogLevel.Information,\n  information: LogLevel.Information,\n  warn: LogLevel.Warning,\n  warning: LogLevel.Warning,\n  error: LogLevel.Error,\n  critical: LogLevel.Critical,\n  none: LogLevel.None\n};\n\nfunction parseLogLevel(name) {\n  // Case-insensitive matching via lower-casing\n  // Yes, I know case-folding is a complicated problem in Unicode, but we only support\n  // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\n  const mapping = LogLevelNameMapping[name.toLowerCase()];\n\n  if (typeof mapping !== \"undefined\") {\n    return mapping;\n  } else {\n    throw new Error(`Unknown log level: ${name}`);\n  }\n}\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\n\n\nexport class HubConnectionBuilder {\n  configureLogging(logging) {\n    Arg.isRequired(logging, \"logging\");\n\n    if (isLogger(logging)) {\n      this.logger = logging;\n    } else if (typeof logging === \"string\") {\n      const logLevel = parseLogLevel(logging);\n      this.logger = new ConsoleLogger(logLevel);\n    } else {\n      this.logger = new ConsoleLogger(logging);\n    }\n\n    return this;\n  }\n\n  withUrl(url, transportTypeOrOptions) {\n    Arg.isRequired(url, \"url\");\n    Arg.isNotEmpty(url, \"url\");\n    this.url = url; // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n    // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n\n    if (typeof transportTypeOrOptions === \"object\") {\n      this.httpConnectionOptions = { ...this.httpConnectionOptions,\n        ...transportTypeOrOptions\n      };\n    } else {\n      this.httpConnectionOptions = { ...this.httpConnectionOptions,\n        transport: transportTypeOrOptions\n      };\n    }\n\n    return this;\n  }\n  /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n   *\r\n   * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n   */\n\n\n  withHubProtocol(protocol) {\n    Arg.isRequired(protocol, \"protocol\");\n    this.protocol = protocol;\n    return this;\n  }\n\n  withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\n    if (this.reconnectPolicy) {\n      throw new Error(\"A reconnectPolicy has already been set.\");\n    }\n\n    if (!retryDelaysOrReconnectPolicy) {\n      this.reconnectPolicy = new DefaultReconnectPolicy();\n    } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\n      this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\n    } else {\n      this.reconnectPolicy = retryDelaysOrReconnectPolicy;\n    }\n\n    return this;\n  }\n  /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n   *\r\n   * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n   */\n\n\n  build() {\n    // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n    // provided to configureLogger\n    const httpConnectionOptions = this.httpConnectionOptions || {}; // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n\n    if (httpConnectionOptions.logger === undefined) {\n      // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n      httpConnectionOptions.logger = this.logger;\n    } // Now create the connection\n\n\n    if (!this.url) {\n      throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n    }\n\n    const connection = new HttpConnection(this.url, httpConnectionOptions);\n    return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy);\n  }\n\n}\n\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n}","map":{"version":3,"names":["DefaultReconnectPolicy","HttpConnection","HubConnection","LogLevel","JsonHubProtocol","NullLogger","Arg","ConsoleLogger","LogLevelNameMapping","trace","Trace","debug","Debug","info","Information","information","warn","Warning","warning","error","Error","critical","Critical","none","None","parseLogLevel","name","mapping","toLowerCase","HubConnectionBuilder","configureLogging","logging","isRequired","isLogger","logger","logLevel","withUrl","url","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","transport","withHubProtocol","protocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","reconnectPolicy","Array","isArray","build","undefined","connection","create","instance","log"],"sources":["C:/Users/Влад/source/repos/Project26/Project26/ClientApp/node_modules/@microsoft/signalr/dist/esm/HubConnectionBuilder.js"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\nfunction parseLogLevel(name) {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    }\r\n    else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    configureLogging(logging) {\r\n        Arg.isRequired(logging, \"logging\");\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        }\r\n        else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        }\r\n        else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n        return this;\r\n    }\r\n    withUrl(url, transportTypeOrOptions) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n        this.url = url;\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        }\r\n        else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    withHubProtocol(protocol) {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n    withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        }\r\n        else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        }\r\n        else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n        return this;\r\n    }\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    build() {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n        return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy);\r\n    }\r\n}\r\nfunction isLogger(logger) {\r\n    return logger.log !== undefined;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}