{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/\\u0412\\u043B\\u0430\\u0434/source/repos/Project26/Project26/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\nimport { LongPollingTransport } from \"./LongPollingTransport\";\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\nimport { WebSocketTransport } from \"./WebSocketTransport\";\nconst MAX_REDIRECTS = 100;\n/** @private */\n\nexport class HttpConnection {\n  constructor(url, options = {}) {\n    this._stopPromiseResolver = () => {};\n\n    this.features = {};\n    this._negotiateVersion = 1;\n    Arg.isRequired(url, \"url\");\n    this._logger = createLogger(options.logger);\n    this.baseUrl = this._resolveUrl(url);\n    options = options || {};\n    options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\n\n    if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\n      options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\n    } else {\n      throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\n    }\n\n    options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\n    let webSocketModule = null;\n    let eventSourceModule = null;\n\n    if (Platform.isNode && typeof require !== \"undefined\") {\n      // In order to ignore the dynamic require in webpack builds we need to do this magic\n      // @ts-ignore: TS doesn't know about these names\n      const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n      webSocketModule = requireFunc(\"ws\");\n      eventSourceModule = requireFunc(\"eventsource\");\n    }\n\n    if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\n      options.WebSocket = WebSocket;\n    } else if (Platform.isNode && !options.WebSocket) {\n      if (webSocketModule) {\n        options.WebSocket = webSocketModule;\n      }\n    }\n\n    if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\n      options.EventSource = EventSource;\n    } else if (Platform.isNode && !options.EventSource) {\n      if (typeof eventSourceModule !== \"undefined\") {\n        options.EventSource = eventSourceModule;\n      }\n    }\n\n    this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\n    this._connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n    this._connectionStarted = false;\n    this._options = options;\n    this.onreceive = null;\n    this.onclose = null;\n  }\n\n  start(transferFormat) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      transferFormat = transferFormat || TransferFormat.Binary;\n      Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n      _this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\n\n      if (_this._connectionState !== \"Disconnected\"\n      /* Disconnected */\n      ) {\n        return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\n      }\n\n      _this._connectionState = \"Connecting\"\n      /* Connecting */\n      ;\n      _this._startInternalPromise = _this._startInternal(transferFormat);\n      yield _this._startInternalPromise; // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\n\n      if (_this._connectionState === \"Disconnecting\"\n      /* Disconnecting */\n      ) {\n        // stop() was called and transitioned the client into the Disconnecting state.\n        const message = \"Failed to start the HttpConnection before stop() was called.\";\n\n        _this._logger.log(LogLevel.Error, message); // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\n\n\n        yield _this._stopPromise;\n        return Promise.reject(new AbortError(message));\n      } else if (_this._connectionState !== \"Connected\"\n      /* Connected */\n      ) {\n        // stop() was called and transitioned the client into the Disconnecting state.\n        const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\n\n        _this._logger.log(LogLevel.Error, message);\n\n        return Promise.reject(new AbortError(message));\n      }\n\n      _this._connectionStarted = true;\n    })();\n  }\n\n  send(data) {\n    if (this._connectionState !== \"Connected\"\n    /* Connected */\n    ) {\n      return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\n    }\n\n    if (!this._sendQueue) {\n      this._sendQueue = new TransportSendQueue(this.transport);\n    } // Transport will not be null if state is connected\n\n\n    return this._sendQueue.send(data);\n  }\n\n  stop(error) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2._connectionState === \"Disconnected\"\n      /* Disconnected */\n      ) {\n        _this2._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\n\n        return Promise.resolve();\n      }\n\n      if (_this2._connectionState === \"Disconnecting\"\n      /* Disconnecting */\n      ) {\n        _this2._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\n\n        return _this2._stopPromise;\n      }\n\n      _this2._connectionState = \"Disconnecting\"\n      /* Disconnecting */\n      ;\n      _this2._stopPromise = new Promise(resolve => {\n        // Don't complete stop() until stopConnection() completes.\n        _this2._stopPromiseResolver = resolve;\n      }); // stopInternal should never throw so just observe it.\n\n      yield _this2._stopInternal(error);\n      yield _this2._stopPromise;\n    })();\n  }\n\n  _stopInternal(error) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // Set error as soon as possible otherwise there is a race between\n      // the transport closing and providing an error and the error from a close message\n      // We would prefer the close message error.\n      _this3._stopError = error;\n\n      try {\n        yield _this3._startInternalPromise;\n      } catch (e) {// This exception is returned to the user as a rejected Promise from the start method.\n      } // The transport's onclose will trigger stopConnection which will run our onclose event.\n      // The transport should always be set if currently connected. If it wasn't set, it's likely because\n      // stop was called during start() and start() failed.\n\n\n      if (_this3.transport) {\n        try {\n          yield _this3.transport.stop();\n        } catch (e) {\n          _this3._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\n\n          _this3._stopConnection();\n        }\n\n        _this3.transport = undefined;\n      } else {\n        _this3._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\n      }\n    })();\n  }\n\n  _startInternal(transferFormat) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // Store the original base url and the access token factory since they may change\n      // as part of negotiating\n      let url = _this4.baseUrl;\n      _this4._accessTokenFactory = _this4._options.accessTokenFactory;\n      _this4._httpClient._accessTokenFactory = _this4._accessTokenFactory;\n\n      try {\n        if (_this4._options.skipNegotiation) {\n          if (_this4._options.transport === HttpTransportType.WebSockets) {\n            // No need to add a connection ID in this case\n            _this4.transport = _this4._constructTransport(HttpTransportType.WebSockets); // We should just call connect directly in this case.\n            // No fallback or negotiate in this case.\n\n            yield _this4._startTransport(url, transferFormat);\n          } else {\n            throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\n          }\n        } else {\n          let negotiateResponse = null;\n          let redirects = 0;\n\n          do {\n            negotiateResponse = yield _this4._getNegotiationResponse(url); // the user tries to stop the connection when it is being started\n\n            if (_this4._connectionState === \"Disconnecting\"\n            /* Disconnecting */\n            || _this4._connectionState === \"Disconnected\"\n            /* Disconnected */\n            ) {\n              throw new AbortError(\"The connection was stopped during negotiation.\");\n            }\n\n            if (negotiateResponse.error) {\n              throw new Error(negotiateResponse.error);\n            }\n\n            if (negotiateResponse.ProtocolVersion) {\n              throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\n            }\n\n            if (negotiateResponse.url) {\n              url = negotiateResponse.url;\n            }\n\n            if (negotiateResponse.accessToken) {\n              // Replace the current access token factory with one that uses\n              // the returned access token\n              const accessToken = negotiateResponse.accessToken;\n\n              _this4._accessTokenFactory = () => accessToken; // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\n\n\n              _this4._httpClient._accessToken = accessToken;\n              _this4._httpClient._accessTokenFactory = undefined;\n            }\n\n            redirects++;\n          } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\n\n          if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\n            throw new Error(\"Negotiate redirection limit exceeded.\");\n          }\n\n          yield _this4._createTransport(url, _this4._options.transport, negotiateResponse, transferFormat);\n        }\n\n        if (_this4.transport instanceof LongPollingTransport) {\n          _this4.features.inherentKeepAlive = true;\n        }\n\n        if (_this4._connectionState === \"Connecting\"\n        /* Connecting */\n        ) {\n          // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\n          // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\n          _this4._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\n\n          _this4._connectionState = \"Connected\"\n          /* Connected */\n          ;\n        } // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\n        // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\n        // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\n\n      } catch (e) {\n        _this4._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\n\n        _this4._connectionState = \"Disconnected\"\n        /* Disconnected */\n        ;\n        _this4.transport = undefined; // if start fails, any active calls to stop assume that start will complete the stop promise\n\n        _this4._stopPromiseResolver();\n\n        return Promise.reject(e);\n      }\n    })();\n  }\n\n  _getNegotiationResponse(url) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const headers = {};\n      const [name, value] = getUserAgentHeader();\n      headers[name] = value;\n\n      const negotiateUrl = _this5._resolveNegotiateUrl(url);\n\n      _this5._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\n\n      try {\n        const response = yield _this5._httpClient.post(negotiateUrl, {\n          content: \"\",\n          headers: { ...headers,\n            ..._this5._options.headers\n          },\n          timeout: _this5._options.timeout,\n          withCredentials: _this5._options.withCredentials\n        });\n\n        if (response.statusCode !== 200) {\n          return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\n        }\n\n        const negotiateResponse = JSON.parse(response.content);\n\n        if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\n          // Negotiate version 0 doesn't use connectionToken\n          // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\n          negotiateResponse.connectionToken = negotiateResponse.connectionId;\n        }\n\n        return negotiateResponse;\n      } catch (e) {\n        let errorMessage = \"Failed to complete negotiation with the server: \" + e;\n\n        if (e instanceof HttpError) {\n          if (e.statusCode === 404) {\n            errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\n          }\n        }\n\n        _this5._logger.log(LogLevel.Error, errorMessage);\n\n        return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\n      }\n    })();\n  }\n\n  _createConnectUrl(url, connectionToken) {\n    if (!connectionToken) {\n      return url;\n    }\n\n    return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\n  }\n\n  _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      let connectUrl = _this6._createConnectUrl(url, negotiateResponse.connectionToken);\n\n      if (_this6._isITransport(requestedTransport)) {\n        _this6._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\n\n        _this6.transport = requestedTransport;\n        yield _this6._startTransport(connectUrl, requestedTransferFormat);\n        _this6.connectionId = negotiateResponse.connectionId;\n        return;\n      }\n\n      const transportExceptions = [];\n      const transports = negotiateResponse.availableTransports || [];\n      let negotiate = negotiateResponse;\n\n      for (const endpoint of transports) {\n        const transportOrError = _this6._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\n\n        if (transportOrError instanceof Error) {\n          // Store the error and continue, we don't want to cause a re-negotiate in these cases\n          transportExceptions.push(`${endpoint.transport} failed:`);\n          transportExceptions.push(transportOrError);\n        } else if (_this6._isITransport(transportOrError)) {\n          _this6.transport = transportOrError;\n\n          if (!negotiate) {\n            try {\n              negotiate = yield _this6._getNegotiationResponse(url);\n            } catch (ex) {\n              return Promise.reject(ex);\n            }\n\n            connectUrl = _this6._createConnectUrl(url, negotiate.connectionToken);\n          }\n\n          try {\n            yield _this6._startTransport(connectUrl, requestedTransferFormat);\n            _this6.connectionId = negotiate.connectionId;\n            return;\n          } catch (ex) {\n            _this6._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\n\n            negotiate = undefined;\n            transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\n\n            if (_this6._connectionState !== \"Connecting\"\n            /* Connecting */\n            ) {\n              const message = \"Failed to select transport before stop() was called.\";\n\n              _this6._logger.log(LogLevel.Debug, message);\n\n              return Promise.reject(new AbortError(message));\n            }\n          }\n        }\n      }\n\n      if (transportExceptions.length > 0) {\n        return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\n      }\n\n      return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\n    })();\n  }\n\n  _constructTransport(transport) {\n    switch (transport) {\n      case HttpTransportType.WebSockets:\n        if (!this._options.WebSocket) {\n          throw new Error(\"'WebSocket' is not supported in your environment.\");\n        }\n\n        return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\n\n      case HttpTransportType.ServerSentEvents:\n        if (!this._options.EventSource) {\n          throw new Error(\"'EventSource' is not supported in your environment.\");\n        }\n\n        return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\n\n      case HttpTransportType.LongPolling:\n        return new LongPollingTransport(this._httpClient, this._logger, this._options);\n\n      default:\n        throw new Error(`Unknown transport: ${transport}.`);\n    }\n  }\n\n  _startTransport(url, transferFormat) {\n    this.transport.onreceive = this.onreceive;\n\n    this.transport.onclose = e => this._stopConnection(e);\n\n    return this.transport.connect(url, transferFormat);\n  }\n\n  _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat) {\n    const transport = HttpTransportType[endpoint.transport];\n\n    if (transport === null || transport === undefined) {\n      this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n\n      return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\n    } else {\n      if (transportMatches(requestedTransport, transport)) {\n        const transferFormats = endpoint.transferFormats.map(s => TransferFormat[s]);\n\n        if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\n          if (transport === HttpTransportType.WebSockets && !this._options.WebSocket || transport === HttpTransportType.ServerSentEvents && !this._options.EventSource) {\n            this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\n\n            return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\n          } else {\n            this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\n\n            try {\n              return this._constructTransport(transport);\n            } catch (ex) {\n              return ex;\n            }\n          }\n        } else {\n          this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\n\n          return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\n        }\n      } else {\n        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\n\n        return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\n      }\n    }\n  }\n\n  _isITransport(transport) {\n    return transport && typeof transport === \"object\" && \"connect\" in transport;\n  }\n\n  _stopConnection(error) {\n    this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\n\n    this.transport = undefined; // If we have a stopError, it takes precedence over the error from the transport\n\n    error = this._stopError || error;\n    this._stopError = undefined;\n\n    if (this._connectionState === \"Disconnected\"\n    /* Disconnected */\n    ) {\n      this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\n\n      return;\n    }\n\n    if (this._connectionState === \"Connecting\"\n    /* Connecting */\n    ) {\n      this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\n\n      throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\n    }\n\n    if (this._connectionState === \"Disconnecting\"\n    /* Disconnecting */\n    ) {\n      // A call to stop() induced this call to stopConnection and needs to be completed.\n      // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\n      this._stopPromiseResolver();\n    }\n\n    if (error) {\n      this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\n    } else {\n      this._logger.log(LogLevel.Information, \"Connection disconnected.\");\n    }\n\n    if (this._sendQueue) {\n      this._sendQueue.stop().catch(e => {\n        this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\n      });\n\n      this._sendQueue = undefined;\n    }\n\n    this.connectionId = undefined;\n    this._connectionState = \"Disconnected\"\n    /* Disconnected */\n    ;\n\n    if (this._connectionStarted) {\n      this._connectionStarted = false;\n\n      try {\n        if (this.onclose) {\n          this.onclose(error);\n        }\n      } catch (e) {\n        this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\n      }\n    }\n  }\n\n  _resolveUrl(url) {\n    // startsWith is not supported in IE\n    if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\n      return url;\n    }\n\n    if (!Platform.isBrowser) {\n      throw new Error(`Cannot resolve '${url}'.`);\n    } // Setting the url to the href propery of an anchor tag handles normalization\n    // for us. There are 3 main cases.\n    // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\n    // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\n    // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\n\n\n    const aTag = window.document.createElement(\"a\");\n    aTag.href = url;\n\n    this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\n\n    return aTag.href;\n  }\n\n  _resolveNegotiateUrl(url) {\n    const index = url.indexOf(\"?\");\n    let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\n\n    if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\n      negotiateUrl += \"/\";\n    }\n\n    negotiateUrl += \"negotiate\";\n    negotiateUrl += index === -1 ? \"\" : url.substring(index);\n\n    if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\n      negotiateUrl += index === -1 ? \"?\" : \"&\";\n      negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\n    }\n\n    return negotiateUrl;\n  }\n\n}\n\nfunction transportMatches(requestedTransport, actualTransport) {\n  return !requestedTransport || (actualTransport & requestedTransport) !== 0;\n}\n/** @private */\n\n\nexport class TransportSendQueue {\n  constructor(_transport) {\n    this._transport = _transport;\n    this._buffer = [];\n    this._executing = true;\n    this._sendBufferedData = new PromiseSource();\n    this._transportResult = new PromiseSource();\n    this._sendLoopPromise = this._sendLoop();\n  }\n\n  send(data) {\n    this._bufferData(data);\n\n    if (!this._transportResult) {\n      this._transportResult = new PromiseSource();\n    }\n\n    return this._transportResult.promise;\n  }\n\n  stop() {\n    this._executing = false;\n\n    this._sendBufferedData.resolve();\n\n    return this._sendLoopPromise;\n  }\n\n  _bufferData(data) {\n    if (this._buffer.length && typeof this._buffer[0] !== typeof data) {\n      throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof data}`);\n    }\n\n    this._buffer.push(data);\n\n    this._sendBufferedData.resolve();\n  }\n\n  _sendLoop() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      while (true) {\n        yield _this7._sendBufferedData.promise;\n\n        if (!_this7._executing) {\n          if (_this7._transportResult) {\n            _this7._transportResult.reject(\"Connection stopped.\");\n          }\n\n          break;\n        }\n\n        _this7._sendBufferedData = new PromiseSource();\n        const transportResult = _this7._transportResult;\n        _this7._transportResult = undefined;\n        const data = typeof _this7._buffer[0] === \"string\" ? _this7._buffer.join(\"\") : TransportSendQueue._concatBuffers(_this7._buffer);\n        _this7._buffer.length = 0;\n\n        try {\n          yield _this7._transport.send(data);\n          transportResult.resolve();\n        } catch (error) {\n          transportResult.reject(error);\n        }\n      }\n    })();\n  }\n\n  static _concatBuffers(arrayBuffers) {\n    const totalLength = arrayBuffers.map(b => b.byteLength).reduce((a, b) => a + b);\n    const result = new Uint8Array(totalLength);\n    let offset = 0;\n\n    for (const item of arrayBuffers) {\n      result.set(new Uint8Array(item), offset);\n      offset += item.byteLength;\n    }\n\n    return result.buffer;\n  }\n\n}\n\nclass PromiseSource {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\n  }\n\n  resolve() {\n    this._resolver();\n  }\n\n  reject(reason) {\n    this._rejecter(reason);\n  }\n\n}","map":{"version":3,"names":["AccessTokenHttpClient","DefaultHttpClient","AggregateErrors","DisabledTransportError","FailedToNegotiateWithServerError","FailedToStartTransportError","HttpError","UnsupportedTransportError","AbortError","LogLevel","HttpTransportType","TransferFormat","LongPollingTransport","ServerSentEventsTransport","Arg","createLogger","getUserAgentHeader","Platform","WebSocketTransport","MAX_REDIRECTS","HttpConnection","constructor","url","options","_stopPromiseResolver","features","_negotiateVersion","isRequired","_logger","logger","baseUrl","_resolveUrl","logMessageContent","undefined","withCredentials","Error","timeout","webSocketModule","eventSourceModule","isNode","require","requireFunc","__webpack_require__","__non_webpack_require__","WebSocket","EventSource","_httpClient","httpClient","accessTokenFactory","_connectionState","_connectionStarted","_options","onreceive","onclose","start","transferFormat","Binary","isIn","log","Debug","Promise","reject","_startInternalPromise","_startInternal","message","_stopPromise","send","data","_sendQueue","TransportSendQueue","transport","stop","error","resolve","_stopInternal","_stopError","e","_stopConnection","_accessTokenFactory","skipNegotiation","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_accessToken","_createTransport","inherentKeepAlive","headers","name","value","negotiateUrl","_resolveNegotiateUrl","response","post","content","statusCode","JSON","parse","negotiateVersion","connectionToken","connectionId","errorMessage","_createConnectUrl","indexOf","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","push","ex","length","join","ServerSentEvents","LongPolling","connect","transportMatches","transferFormats","map","s","Warning","Information","catch","lastIndexOf","isBrowser","aTag","window","document","createElement","href","index","substring","actualTransport","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","b","byteLength","reduce","a","result","Uint8Array","offset","item","set","buffer","_resolver","_rejecter","reason"],"sources":["C:/Users/Влад/source/repos/Project26/Project26/ClientApp/node_modules/@microsoft/signalr/dist/esm/HttpConnection.js"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\nconst MAX_REDIRECTS = 100;\r\n/** @private */\r\nexport class HttpConnection {\r\n    constructor(url, options = {}) {\r\n        this._stopPromiseResolver = () => { };\r\n        this.features = {};\r\n        this._negotiateVersion = 1;\r\n        Arg.isRequired(url, \"url\");\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        }\r\n        else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n        let webSocketModule = null;\r\n        let eventSourceModule = null;\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n        else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n        else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n        this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\r\n        this._connectionState = \"Disconnected\" /* Disconnected */;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async start(transferFormat) {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n        if (this._connectionState !== \"Disconnected\" /* Disconnected */) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = \"Connecting\" /* Connecting */;\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n        else if (this._connectionState !== \"Connected\" /* Connected */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n        this._connectionStarted = true;\r\n    }\r\n    send(data) {\r\n        if (this._connectionState !== \"Connected\" /* Connected */) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport);\r\n        }\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n    async stop(error) {\r\n        if (this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = \"Disconnecting\" /* Disconnecting */;\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n    async _stopInternal(error) {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n        try {\r\n            await this._startInternalPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n            this.transport = undefined;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n    async _startInternal(transferFormat) {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                }\r\n                else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            }\r\n            else {\r\n                let negotiateResponse = null;\r\n                let redirects = 0;\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === \"Disconnecting\" /* Disconnecting */ || this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n                        throw new AbortError(\"The connection was stopped during negotiation.\");\r\n                    }\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n                    if (negotiateResponse.ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\r\n                        this._httpClient._accessToken = accessToken;\r\n                        this._httpClient._accessTokenFactory = undefined;\r\n                    }\r\n                    redirects++;\r\n                } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n            if (this._connectionState === \"Connecting\" /* Connecting */) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = \"Connected\" /* Connected */;\r\n            }\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = \"Disconnected\" /* Disconnected */;\r\n            this.transport = undefined;\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _getNegotiationResponse(url) {\r\n        const headers = {};\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n            const negotiateResponse = JSON.parse(response.content);\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        }\r\n        catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n    _createConnectUrl(url, connectionToken) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n    async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n        const transportExceptions = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            }\r\n            else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    }\r\n                    catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                }\r\n                catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n                    if (this._connectionState !== \"Connecting\" /* Connecting */) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new AbortError(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n    _constructTransport(transport) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n    _startTransport(url, transferFormat) {\r\n        this.transport.onreceive = this.onreceive;\r\n        this.transport.onclose = (e) => this._stopConnection(e);\r\n        return this.transport.connect(url, transferFormat);\r\n    }\r\n    _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat) {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        }\r\n        else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        }\r\n                        catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n    _isITransport(transport) {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n    _stopConnection(error) {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n        this.transport = undefined;\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n        if (this._connectionState === \"Disconnected\" /* Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n        if (this._connectionState === \"Connecting\" /* Connecting */) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* Disconnecting */) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n        this.connectionId = undefined;\r\n        this._connectionState = \"Disconnected\" /* Disconnected */;\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    _resolveUrl(url) {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n    _resolveNegotiateUrl(url) {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\nfunction transportMatches(requestedTransport, actualTransport) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    constructor(_transport) {\r\n        this._transport = _transport;\r\n        this._buffer = [];\r\n        this._executing = true;\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n    send(data) {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n    stop() {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n    _bufferData(data) {\r\n        if (this._buffer.length && typeof (this._buffer[0]) !== typeof (data)) {\r\n            throw new Error(`Expected data to be of type ${typeof (this._buffer)} but was of type ${typeof (data)}`);\r\n        }\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n    async _sendLoop() {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n                break;\r\n            }\r\n            this._sendBufferedData = new PromiseSource();\r\n            const transportResult = this._transportResult;\r\n            this._transportResult = undefined;\r\n            const data = typeof (this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n            this._buffer.length = 0;\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            }\r\n            catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n    static _concatBuffers(arrayBuffers) {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n        return result.buffer;\r\n    }\r\n}\r\nclass PromiseSource {\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n    resolve() {\r\n        this._resolver();\r\n    }\r\n    reject(reason) {\r\n        this._rejecter(reason);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}